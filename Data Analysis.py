# -*- coding: utf-8 -*-
"""DAP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IOo1UUKrXDylICEogToT6JWqH8EINWiO
"""

import numpy as np

arr = np.array([1,2,3,4,5])
print(arr)

a=np.zeros((3,3))
print(a)
b=np.zeros((2,2))
print(b)

arange_arr = np.arange(10)
print(arange_arr)

#array manipilation
reshaped_arr = arr.reshape(5,1)
print(reshaped_arr)

sliced_arr = arr[2:4]
print(sliced_arr)

arr1=np.array([1,2,3,4])
arr2=np.array([5,6,7,8])
print(np.vstack(arr1+arr2))
arr3 = np.split(arr1,2)
print(arr3)





#transpose
a = np.array([[1,2,3,4],[5,6,7,8]])
b=a.T
print(b)

#array broadcasting
arr1=np.array([3,3,4])
a=arr1+3
print(a)
arr2=np.array([6,6,6])
print(arr1+arr2)

#linear algebra

a=np.array([[2,3,4,5],[4,5]6,7])
b=np.array([[5,6,7],[5,8,9]])
#print(a)
#print(b)

c=np.dot(a,b)
d=np.linalg.eig(c)
print(c)
print(d)

a=np.array([[2,4,6],[1,3,5]])
b=np.sum(a,axis=1)
c=np.sum(a,axis=0)
print(b)
print(c)

#statistical operations
a=np.array([1,2,3,4,5])
mean=np.mean(a)
median=np.median(a)
print(mean)
print(median)

#file uploading

data=np.loadtxt("/content/data.txt",dtype=int)
r=np.savetxt("/content/date.txt",data)
print(data)
print(r)

import matplotlib.pyplot as plt
a = np.array([1,2,3,4])
b= np.array([8,1])
plt.plot(a)
plt.plot(b)

#pandas
import pandas as pd

a = ['ramu','manoj','shanmukh','vamsi','swarjan']
r = pd.Series(a,index=[40,54,67,29,59])
print(r)

df = pd.read_csv("/content/archive (2).zip",sep=" ")
print(df)

df = pd.read_csv("/content/pandas.txt",sep=" ")
print(df)
df.shape,df.shape

df = pd.read_excel("/content/Cola.xlsx")
print(df)
df.shape,df.shape

print(df.loc[6])

df1 = pd.read_excel("/content/Book1.xlsx")
m=df1['num1'].mean()

print(df1)
print(m)

from google.colab import drive
drive.mount('/content/drive')



df = pd.read_excel("/content/Book1.xlsx")
print(df)
df.shape
print(df.groupby(['num1'])['num2'].count())

import numpy as np
import matplotlib.pyplot as plt
runs = np.array([100,50,91,78,89,25,34,19,9,10])
w = np.array([1,0,2,0,3,7,8,9,7,5])
plt.plot(runs,w,color='red')
plt.title('INDvsAUS_score')
#plt.subplot(2,1,1)
plt.show()



import numpy as np
import matplotlib.pyplot as plt

tigar = np.linspace(2*np.pi,-2*np.pi,50)
print(tigar)
plt.plot(tigar,np.sin(tigar),color='black')
plt.title("sin(x)")
plt.show()

import numpy as np
import matplotlib.pyplot as plt

tigar = np.linspace(-np.pi,np.pi,100)
print(tigar)
plt.plot(tigar,np.sin(tigar),color='orange')
plt.title("sin(x)")
plt.show()

import numpy as np
import matplotlib.pyplot as plt
#creating x
overs = np.arange(5,50,5)
overs_a = np.arange(5,30,5)
#creating y
runs_i = np.array([25,51,84,131,160,189,220,250,267])
runs_a = np.array([15,41,94,110,151])
wickets = np.array([12,32,96])
#plotting
plt.subplot(2,1,1)
plt.plot(overs,runs_i,color="blue",label='IND')
plt.legend(loc='best')
plt.subplot(2,1,2)
plt.plot(overs_a,runs_a,color='yellow',label = 'AUS')
#combining two graph
plt.legend(loc='best')
#display the final graph
plt.show()

import matplotlib.pyplot as plt

a = [230,560,780,127,128]
b = [200,160,270,127,400]
years = [1,2,3,4]

profile_a = [(a[i]-a[i-1]) for i in range(1,len(a))]
profile_b = [(b[i]-b[i-1]) for i in range(1,len(b))]
plt.subplot(2,1,2)
plt.plot(years,profile_a,color='hotpink',linewidth ='5',label = 'company',marker='*',ms='15',mec='k')
plt.subplot(2,1,1)
plt.plot(years,profile_b,color='blue',linestyle='dotted',label='companyB',marker = 'H')

#explore

a= np.array([25,60,5,10])
labe = ["AIML","PYTHON","PANDAS","NUMPY"]
explo = [0.2,0,0,0]
plt.title('python',fontsize=25)
colors=['green','orange','blue']

plt.pie(a,labels = labe,explode=explo,startangle =180,colors=color)
plt.legend(loc='best')
plt.show()

#!pip install pandas
import pandas as pd
data = pd.read_csv('temperature.txt')
average_temperature = data['Temperature'].mean()
highest_temperature = data['Temperature'].max()
lowest_temperature = data['Temperature'].min()
threshold = 25
days_above_threshold = data[data['Temperature'] > threshold].shape[0]
print("Average Temperature:", average_temperature, "째C")
print("Highest Temperature Recorded:", highest_temperature, "째C")
print("Lowest Temperature Recorded:", lowest_temperature, "째C")
print("Number of Days Exceeding", threshold, "째C:", days_above_threshold)

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
df=pd.read_excel("/content/temperature analysis.xlsx")
print(df)
avgtemp=df['TEMPERATURE'].mean()
df=df.fillna(avgtemp)
a1=np.array(df['TEMPERATURE'])
maxtemp=df['TEMPERATURE'].max()
mintemp=df['TEMPERATURE'].min()
days=[a1[i] for i in range(1, len(a1)) if a1[i]>avgtemp]
date=np.array(df['DAY'])
plt.plot(date,a1,color='blue',linewidth='2',label='Temperature',marker='>',ms='10',mec='b')
plt.legend(loc='best')
print('Mean =',avgtemp)
print('Maximum =',maxtemp)
print('Minimum =',mintemp)
print('Threshold',avgtemp,'is',len(days),'DAY')
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt
#load example dataset
#tip = sns.load_dataset("tip")
tips = sns.load_dataset("tips")
#create a scatter plot
#sns.scatterplot(z="temperature",z="tip",data=tip)
sns.scatterplot(x="total_bill",y="tip",data=tips)
plt.title("scatter plot of total bill vs tip")
plt.xlabel("total bill($)")
plt.ylabel("tip($)")
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt
#load example dataset

tips = sns.load_dataset("tips")
#create a scatter plot
sns.scatterplot(x="total_bill",y="tip",data=tips)
plt.title("scatter plot of total bill vs tip")
plt.xlabel("total bill($)")
plt.ylabel("tip($)")
plt.show()
tips.head(20)

import seaborn as sns
import matplotlib.pyplot as plt
tips=sns.load_dataset("tips")
sns.violinplot(x="day",y="total_bill",data=tips)
plt.title("Distribution of  Total Bill by day")
plt.xlabel("Day of the week")
plt.ylabel("Total Bills")
plt.show()
tips.head(20)

iris = sns.load_dataset("iris")
correlation_matrix = iris.corr()
sns.heatmap(correlation_matrix,annot=True,cmap="coolwarm")
plt.title("correlation heapmap of iris dataset")
plt.title("correlation heatmap of iris dataset")
plt.show()
iris.head(151)

import seaborn as sns
import matplotlib.pyplot as plt
flights = sns.load_dataset("flights")
correlation_matrix = flights.corr()
sns.heatmap(correlation_matrix, annot=True, cmap="coolwarm")
plt.title('Correlation Heatmap of Flights Dataset')
plt.show()
print(flights)

